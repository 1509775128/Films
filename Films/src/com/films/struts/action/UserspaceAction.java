/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.films.struts.action;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.films.domain.Users;
import com.films.service.inter.IFCommService;
import com.films.service.inter.IFilmService;
import com.films.service.inter.IOrderService;
import com.films.service.inter.ITimeTableService;

/** 
 * MyEclipse Struts
 * Creation date: 10-12-2012
 * 
 * XDoclet definition:
 * @struts.action parameter="flag"
 */
public class UserspaceAction extends DispatchAction {


	//private IUserService userService;
	private IFilmService filmService;
	private ITimeTableService timeTableService;
	private IOrderService orderService;
	private IFCommService fcService;

	public void setFilmService(IFilmService filmService) {
		this.filmService = filmService;
	}
	public void setTimeTableService(ITimeTableService timeTableService) {
		this.timeTableService = timeTableService;
	}
	
	public void setOrderService(IOrderService orderService) {
		this.orderService = orderService;
	}
	
	public void setFcService(IFCommService fcService) {
		this.fcService = fcService;
	}
	
	public ActionForward goUserOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		Users user = (Users) request.getSession().getAttribute("loginUser");
		if(user!=null){
			String s_pageNow=request.getParameter("pageNow");
			int pageNow=1;
			if(s_pageNow!=null){
				pageNow=Integer.parseInt(s_pageNow);
			}
			request.setAttribute("now", pageNow);
			List order = orderService.getOrders(10, pageNow,user.getUid());
			List orderP = orderService.getOrdersByPayed(10, pageNow,user.getUid());
			int pageCount=orderService.getPageCount(10);
			request.setAttribute("pageCount", pageCount);
			request.setAttribute("order", order);
			request.setAttribute("orderP", orderP);
			return mapping.findForward("goUserOrder");
		}else{	
			return mapping.findForward("logout");
		}
	}
	public ActionForward goUserInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if(request.getSession().getAttribute("loginUser")!=null){
			return mapping.findForward("goUserInfo");
		}else{	
			return mapping.findForward("logout");
		}
	}
	public ActionForward goUserPwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		if(request.getSession().getAttribute("loginUser")!=null){
			return mapping.findForward("goUserPwd");
		}else{	
			return mapping.findForward("logout");
		}
	}
	public ActionForward goUserComment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		Users user = (Users) request.getSession().getAttribute("loginUser");
		if(user!=null){
			String s_pageNow=request.getParameter("pageNow");
			int pageNow=1;
			if(s_pageNow!=null){
				pageNow=Integer.parseInt(s_pageNow);
			}
			request.setAttribute("now", pageNow);
			int pageCount=fcService.getPageCount(10);
			request.setAttribute("pageCount", pageCount);
			request.setAttribute("mycom", fcService.getComments(10,pageNow,user.getUid()));
			return mapping.findForward("goUserComment");
		}else{	
			return mapping.findForward("logout");
		}
	}
	public ActionForward logout(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		request.getSession().invalidate();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		//set today movie to attribute
		request.getSession().setAttribute("quicktt",timeTableService.getTimetableToday(sdf.format(date)));
		request.setAttribute("film", filmService.getUpcoming());
		request.setAttribute("tt", timeTableService.showTimeTable(8, 1));
		return mapping.findForward("logout");
	}
}